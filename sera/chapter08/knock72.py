criterion = nn.CrossEntropyLoss() # クロスエントロピー損失関数を定義

l_1 = criterion(model(X_train[:1]), y_train[:1])  # ネットワークの出力と正解ラベルを用いて損失を計算
model.zero_grad()  # 勾配をゼロで初期化
l_1.backward()  # 勾配を計算
print("損失：{}".format(l_1))
print("勾配：\n{}".format(model.fc.weight.grad))

l = criterion(model(X_train[:4]), y_train[:4])
model.zero_grad()
l.backward()
print("損失：{}".format(l))
print("勾配：\n{}".format(model.fc.weight.grad))

"""
損失：1.553894281387329
勾配：
tensor([[ 2.1231e-03, -2.4987e-03, -3.7984e-03,  ..., -9.8474e-05,
          1.6137e-03,  2.6110e-03],
        [ 2.4518e-02, -2.8856e-02, -4.3865e-02,  ..., -1.1372e-03,
          1.8636e-02,  3.0153e-02],
        [-5.4190e-02,  6.3779e-02,  9.6952e-02,  ...,  2.5135e-03,
         -4.1189e-02, -6.6645e-02],
        [ 2.7549e-02, -3.2424e-02, -4.9288e-02,  ..., -1.2778e-03,
          2.0940e-02,  3.3881e-02]])
"""

"""
損失：1.9380863904953003
勾配：
tensor([[ 0.0030,  0.0170, -0.0053,  ...,  0.0388, -0.0143,  0.0120],
        [ 0.0147, -0.0072,  0.0143,  ..., -0.0061,  0.0235,  0.0360],
        [-0.0146,  0.0146,  0.0238,  ..., -0.0018, -0.0098, -0.0193],
        [-0.0031, -0.0245, -0.0329,  ..., -0.0309,  0.0006, -0.0286]])
"""